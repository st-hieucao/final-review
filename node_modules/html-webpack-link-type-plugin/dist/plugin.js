"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HtmlWebpackLinkTypePlugin = void 0;
var minimatch = require("minimatch");
var HtmlWebpackPlugin = require("html-webpack-plugin");
var HtmlWebpackLinkTypePlugin = (function () {
    function HtmlWebpackLinkTypePlugin(typeMap) {
        this.mimeTypeMap = {
            '*.css': 'text/css',
            '*.js': 'text/javascript',
            '*.png': 'image/png',
            '*.jpg': 'image/jpeg',
            '*.jpeg': 'image/jpeg',
            '*.gif': 'image/gif',
            '*.webp': 'image/webp',
            '*.bmp': 'image/bmp',
        };
        if (typeMap) {
            this.mimeTypeMap = __assign(__assign({}, this.mimeTypeMap), typeMap);
        }
    }
    HtmlWebpackLinkTypePlugin.prototype.apply = function (compiler) {
        var _this = this;
        if (compiler.hooks) {
            compiler.hooks.compilation.tap('LinkTypePlugin', function (compilation) {
                if (compilation.hooks.htmlWebpackPluginAlterAssetTags) {
                    compilation.hooks.htmlWebpackPluginAlterAssetTags.tapAsync('LinkTypePlugin', function (data, cb) {
                        data.head = _this._transformAssets(data.head);
                        data.body = _this._transformAssets(data.body);
                        return cb(null, data);
                    });
                }
                else if (HtmlWebpackPlugin && HtmlWebpackPlugin['getHooks']) {
                    var hooks = HtmlWebpackPlugin.getHooks(compilation);
                    hooks.alterAssetTags.tapAsync('LinkTypePlugin', function (data, cb) {
                        data.assetTags.scripts = _this._transformAssets(data.assetTags.scripts);
                        data.assetTags.styles = _this._transformAssets(data.assetTags.styles);
                        data.assetTags.meta = _this._transformAssets(data.assetTags.meta);
                        return cb(null, data);
                    });
                }
                else {
                    throw new Error('Cannot find appropriate compilation hook');
                }
            });
        }
        else {
            compiler.plugin('compilation', function (compilation) {
                compilation.plugin('html-webpack-plugin-alter-asset-tags', function (htmlPluginData, callback) {
                    htmlPluginData.head = _this._transformAssets(htmlPluginData.head);
                    htmlPluginData.body = _this._transformAssets(htmlPluginData.body);
                    return callback(null, htmlPluginData);
                });
            });
        }
    };
    HtmlWebpackLinkTypePlugin.prototype._transformAssets = function (assets) {
        var _this = this;
        return assets.map(function (l) {
            if (l.tagName && l.tagName === 'link' && l.attributes && l.attributes.href) {
                var type = _this._findMimeType(l.attributes.href);
                if (type && type.length) {
                    l.attributes.type = type;
                }
            }
            return l;
        });
    };
    HtmlWebpackLinkTypePlugin.prototype._findMimeType = function (filename) {
        var typeKeys = Object.keys(this.mimeTypeMap);
        for (var i = 0; i < typeKeys.length; i++) {
            var typeGlob = typeKeys[i];
            if (minimatch(filename, typeGlob)) {
                return this.mimeTypeMap[typeGlob];
            }
        }
    };
    return HtmlWebpackLinkTypePlugin;
}());
exports.HtmlWebpackLinkTypePlugin = HtmlWebpackLinkTypePlugin;
